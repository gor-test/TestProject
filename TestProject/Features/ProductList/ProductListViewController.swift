//
//  ProductListViewController.swift
//  TestProject
//
//  Created by GOR GALSTYAN on 2021-02-05.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProductListDisplayLogic: class
{
  func displaySomething(viewModel: ProductList.Fetch.ViewModel)
}

class ProductListViewController: UITableViewController, ProductListDisplayLogic
{
  var interactor: ProductListBusinessLogic?
  var router: (NSObjectProtocol & ProductListRoutingLogic & ProductListDataPassing)?
    
  //MARK: Properties
    
    var products: ProductList.Fetch.ViewModel? = nil

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ProductListInteractor()
    let presenter = ProductListPresenter()
    let router = ProductListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
    // FIXME: implement routing in ProductListRouter
    guard let productDetailViewController = segue.destination as? ProductDetailViewController else {
        fatalError("Unexpected destination: \(segue.destination)")
    }
    guard let selectedProductCell = sender as? ProductTableViewCell else {
        fatalError("Unexpected sender: \(String(describing: sender))")
    }
    guard let indexPath = tableView.indexPath(for: selectedProductCell) else {
        fatalError("The selected cell is not being displayed by the table")
    }
    let selectedProduct = products?.data[indexPath.row]
    productDetailViewController.product = selectedProduct
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = ProductList.Fetch.Request(name: "GET_DATA")
    interactor?.fetchData(request: request)
  }
  
  func displaySomething(viewModel: ProductList.Fetch.ViewModel)
  {
    products = viewModel
    self.tableView.reloadData()
  }
    
    // MARK: - Table view data source

    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return products?.data.count ?? 0
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        // Table view cells are reused and should be dequeued using a cell identifier.
        let cellIdentifier = "ProductTableViewCell"
        
        guard let cell = tableView.dequeueReusableCell(withIdentifier: cellIdentifier, for: indexPath) as? ProductTableViewCell  else {
            fatalError("The dequeued cell is not an instance of ProductTableViewCell.")
        }
        let product = products?.data[indexPath.row]

        cell.nameLabel.text = product?.name
        cell.priceLabel.text = product?.price
        cell.productImage.load(url: product?.image ?? "")
        
        return cell
    }
    
//    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
//        let storyboard = UIStoryboard(name: "ProductDetail", bundle: nil)
//        let vc = storyboard.instantiateViewController(withIdentifier: "ProductDetail") as! ProductViewController
//        let selectedProduct = products[indexPath.row]
//        vc.product = selectedProduct
//        self.present(vc, animated: true)
//    }
}
